cmake_minimum_required(VERSION 2.8)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror -Wall -Wextra -Wfloat-equal")
add_library(tinyspline SHARED tinyspline.c)
add_library(tinyspline_static STATIC tinyspline.c)

if(CMAKE_COMPILER_IS_GNUCXX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror -Wall -Wextra -Wfloat-equal -std=c++11")
  add_library(tinysplinecpp SHARED tinyspline.c tinysplinecpp.cpp)
  add_library(tinysplinecpp_static STATIC tinyspline.c tinysplinecpp.cpp)
endif()

target_include_directories (tinyspline PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories (tinysplinecpp PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

find_package(SWIG)
if(SWIG_FOUND)
  include(${SWIG_USE_FILE})
  include_directories(${CMAKE_CURRENT_SOURCE_DIR})
  set_source_files_properties(tinyspline.i PROPERTIES CPLUSPLUS ON)
  
  find_package(PythonLibs)
  if(PYTHON_INCLUDE_DIRS)
    include_directories(${PYTHON_INCLUDE_DIR})
    #swig_add_module(tinyspline python tinyspline.i tinyspline.c tinysplinecpp.cpp)
  endif()

  find_package(JNI)
  if(JNI_FOUND)
    include_directories(${JAVA_INCLUDE_PATH} ${JAVA_INCLUDE_PATH2})
    set(CMAKE_SWIG_FLAGS -package "so.tinyspline")
    swig_add_module(tinysplinejava java tinyspline.i tinyspline.c tinysplinecpp.cpp)
    
    find_package(Java)
    if(Java_JAVAC_EXECUTABLE)
      include(UseJava)
      file(GLOB GENERATED_JAVA_FILES ${CMAKE_CURRENT_BINARY_DIR}/*.java)
      #add_jar(tinysplinejar ${GENERATED_JAVA_FILES} OUTPUT_NAME tinyspline)
      #add_dependencies(tinysplinejar tinysplinejava)
    endif()
  endif()
endif()
